import {Dialog} from "../dialog";

const showMsg = (msg: string, type: string) => {
    let title = "‚ùÄ " + window.siyuan.languages.infoTip;
    if ("alert" === type) {
        title = "‚ö†Ô∏è " + window.siyuan.languages.warningTip;
    }
    if ("error" === type) {
        title = "‚ùé " + window.siyuan.languages.errorTip;
    }
    if ("success" === type) {
        title = "‚úÖ " + window.siyuan.languages.successTip;
    }
    const msgDialog = new Dialog({
        title: title,
        content: `<div class="b3-dialog__content">
` + msg + `
</div>
<div class="b3-dialog__action">
    <button class="b3-button b3-button--cancel">${window.siyuan.languages.confirm}</button>
</div>`,
        width: "520px",
    });
    const btnsElement = msgDialog.element.querySelectorAll(".b3-button");
    btnsElement[0].addEventListener("click", () => {
        msgDialog.destroy();
    });
};

/**
 * ‰ø°ÊÅØÂºπÁ™ó
 * @param msg ‰ø°ÊÅØ‰ø°ÊÅØ
 */
const infoMsg = (msg: string) => {
    showMsg(msg, undefined);
};

/**
 * Ë≠¶ÂëäÂºπÁ™ó
 * @param msg Ë≠¶Âëä‰ø°ÊÅØ
 */
const alertMsg = (msg: string) => {
    showMsg(msg, "alert");
};

/**
 * ÈîôËØØÂºπÁ™ó
 * @param msg ÈîôËØØ‰ø°ÊÅØ
 */
const errorMsg = (msg: string) => {
    showMsg(msg, "error");
};

/**
 * Ê≠£Á°ÆÂºπÁ™ó
 * @param msg Ê≠£Á°Æ‰ø°ÊÅØ
 */
const successMsg = (msg: string) => {
    showMsg(msg, "success");
};

/**
 * Á°ÆËÆ§ÂºπÁ™ó
 * @param msg Á°ÆËÆ§‰ø°ÊÅØ
 */
const confirmMsg = (msg: string) => {
    const msgDialog = new Dialog({
        title: "üîë " + window.siyuan.languages.key,
        content: `<div class="b3-dialog__content">
` + msg + `
</div>
<div class="b3-dialog__action">
    <button class="b3-button b3-button--cancel">${window.siyuan.languages.cancel}</button><div class="fn__space"></div>
    <button class="b3-button b3-button--text">${window.siyuan.languages.confirm}</button>
</div>`,
        width: "520px",
    });
    const btnsElement = msgDialog.element.querySelectorAll(".b3-button");
    btnsElement[0].addEventListener("click", () => {
        msgDialog.destroy();
    });
    btnsElement[1].addEventListener("click", () => {
        console.log("clicked");
    });
};

/**
 * ËæìÂÖ•‰ø°ÊÅØÁ°ÆËÆ§
 * @param title Ê†áÈ¢ò
 * @param callback ÂõûË∞ÉÔºå‰ºöËøîÂõûËæìÂÖ•ÁöÑÊï∞ÊçÆ
 */
const inputMsg = (title: string, callback: any) => {
    const inputDialog = new Dialog({
        title: "üîëÔ∏è" + title,
        content: `<div class="b3-dialog__content">
    <textarea class="b3-text-field fn__block" placeholder="${window.siyuan.languages.keyPlaceholder}"></textarea>
</div>
<div class="b3-dialog__action">
    <button class="b3-button b3-button--cancel">${window.siyuan.languages.cancel}</button><div class="fn__space"></div>
    <button class="b3-button b3-button--text">${window.siyuan.languages.confirm}</button>
</div>`,
        width: "520px",
    });
    const textAreaElement = inputDialog.element.querySelector("textarea");
    textAreaElement.focus();
    const btnsElement = inputDialog.element.querySelectorAll(".b3-button");
    btnsElement[0].addEventListener("click", () => {
        inputDialog.destroy();
    });
    btnsElement[1].addEventListener("click", () => {
        if (callback) {
            callback(textAreaElement.value);
        }
    });
};

/**
 * ÊñáÁ´†‰∏éÂπ≥Âè∞ÁªëÂÆö
 * @param title Ê†áÈ¢ò
 * @param callback ÂõûË∞ÉÔºå‰ºöËøîÂõûËæìÂÖ•ÁöÑÊï∞ÊçÆ
 */
// eslint-disable-next-line @typescript-eslint/ban-types
const bindPlatformMsg = (title: string, callback: Function) => {
    const inputDialog = new Dialog({
        title: "üîëÔ∏è" + title,
        content: `<div class="b3-dialog__content">
    <textarea class="b3-text-field fn__block" placeholder="${window.siyuan.languages.keyPlaceholder}"></textarea>
</div>
<div class="b3-dialog__action">
    <button class="b3-button b3-button--cancel">${window.siyuan.languages.cancel}</button><div class="fn__space"></div>
    <button class="b3-button b3-button--text">${window.siyuan.languages.confirm}</button>
</div>`,
        width: "520px",
    });
    const textAreaElement = inputDialog.element.querySelector("textarea");
    textAreaElement.focus();
    const btnsElement = inputDialog.element.querySelectorAll(".b3-button");
    btnsElement[0].addEventListener("click", () => {
        inputDialog.destroy();
    });
    btnsElement[1].addEventListener("click", () => {
        if (callback) {
            callback(textAreaElement.value);
        }
    });
};

const msg = {
    infoMsg,
    alertMsg,
    errorMsg,
    successMsg,
    confirmMsg,
    inputMsg,
    bindPlatformMsg
};
export default msg;